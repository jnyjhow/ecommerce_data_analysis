name: CI Homolog - Airflow DAG

on:
  pull_request:
    branches:
      - main

jobs:
  test-airflow:
    runs-on: ubuntu-latest
    environment: homolog

    env:
      AIRFLOW_UID: 1000
      AIRFLOW_PROJ_DIR: ./airflow

    services:

      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: airflow
          POSTGRES_PASSWORD: airflow
          POSTGRES_DB: airflow
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U airflow"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      
      redis:
        image: redis:7.2-bookworm
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
            sudo apt-get update
            sudo apt-get install -y docker-compose

      - name: Build and Start Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d --build

      - name: Wait for Airflow to be healthy
        run: |
          while ! curl -f http://localhost:8080/health; do
            echo "Waiting for Airflow Webserver to be healthy..."
            sleep 10
          done

      - name: Test DAG "fastapi_communication_dag" status
        run: |
          docker-compose exec -T airflow-webserver airflow dags list | grep "fastapi_communication_dag"
          docker-compose exec -T airflow-webserver airflow dags trigger fastapi_communication_dag
          sleep 30
        shell: bash

      - name: Generate UUID Version
        id: uuid_version
        run: echo "::set-output name=uuid::$(uuidgen)"

      - name: Tag and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
          DOCKER_IMAGE_NAME: app_airflow
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          IMAGE_NAME="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}"
          UUID_VERSION=${{ steps.uuid_version.outputs.uuid }}
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest $IMAGE_NAME:latest
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest $IMAGE_NAME:$UUID_VERSION
          docker push $IMAGE_NAME:latest
          docker push $IMAGE_NAME:$UUID_VERSION

      - name: Stop and Remove Containers
        run: |
          docker-compose down
