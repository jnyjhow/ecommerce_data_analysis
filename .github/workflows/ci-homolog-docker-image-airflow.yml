name: CI Homolog - Build and Push Docker Image Airflow

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: homolog
    env:
        DOCKER_IMAGE_NAME: app_airflow

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Install Docker
        run: |
            sudo apt-get update
            sudo apt-get install -y \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Generate UUID Version
        id: uuid_version
        run: echo "::set-output name=uuid::$(uuidgen)"

      - name: Tag and Push Docker Image
        env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
            DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
        run: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            IMAGE_NAME="${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE_NAME }}"
            UUID_VERSION=${{ steps.uuid_version.outputs.uuid }}
            docker build -f docker/airflow/Dockerfile -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
            docker build -f docker/airflow/Dockerfile -t ${{ env.DOCKER_IMAGE_NAME }}:$UUID_VERSION .
            docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest $IMAGE_NAME:latest
            docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest $IMAGE_NAME:$UUID_VERSION
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$UUID_VERSION
            
      - name: Post-build cleanup
        run: docker image prune -af
